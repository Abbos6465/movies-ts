import moviesData from "./moviesData.js";interface Movie {    title: string,    year: number,    categories: string[],    id: string,    rating: number,    time: string,    lang: string,    video_url: string,    summary: string,    smallImg: string,    largeImg: string}const movies: Movie[] = moviesData.map(el => {    const hour: number = Math.trunc(el.runtime / 60);    const min: number = el.runtime % 60;    const time: string = hour || min ? `${hour ? hour+' soat ' : ''} ${min ? min+' daqiqa' : ''}` : '';    return {        title: el?.title ?? '',        year: el?.year ?? null,        categories: el?.categories ?? [],        id: el?.imdbId ?? null,        rating: el?.imdbRating ?? 0,        time: time,        lang: el?.language ?? '',        video_url: `https://www.youtube.com/embed/${el.youtubeId}`,        summary: el?.summary ?? '',        smallImg: el?.smallThumbnail ?? '',        largeImg: el?.bigThumbnail ?? '',    }});interface MoviesParams {    page: number,    name?: string,    rate?: number | null,    category?: string}interface getMoviesType {    per_page: number,    page: number,    last_page: number,    data: Movie[]}const defaultMoviesParams:MoviesParams = {    page: 1}const per_page: number = 12;const getMovies = (params: MoviesParams = defaultMoviesParams): getMoviesType  => {    if(!Object.keys(params).length) return {        data: [],        page: 0,        per_page: 0,        last_page: 0,    }    let newMovies: Movie[] = [];    if(params.name || params.category || params.rate){        movies.forEach(el => {            let hasName: Boolean = false;            let hasRate: Boolean = false;            let hasCategory: Boolean = false;            const title: string = el.title.toLowerCase();                if(params.name) hasName = title.search(params.name.toLowerCase()) !== -1;            if(params.rate) hasRate = el.rating < params.rate;            if(params.category) hasCategory = !!el.categories.find(category => category === params.category);            if(hasName || hasRate || hasCategory) newMovies.push(el);        });    }else newMovies = movies;    const total_page: number = newMovies.length;    const last_page: number = total_page ? Math.ceil(total_page / per_page) : 0;    const startIndex: number = (params.page - 1) * per_page;    const endIndex: number = startIndex + per_page;    const data: Movie[] = newMovies.slice(startIndex, endIndex);    return {        data: data,        page: params.page,        per_page: per_page,        last_page: last_page    };}const  getVideo = (id: string): Movie | null => movies.find(el => el.id === id) ?? null;interface Category {    id: string,    name: string}const getCategories = ():Category[] => {    let categories: Category[]  = [];    movies.forEach(el => {        el.categories.forEach(element => {            if(!categories.find(item => item?.name === element)){                const category: Category = {                    id: element,                    name: element                }                categories.push(category);            }        })    });    return categories;}export {    getMovies,    getVideo,    getCategories,    Movie,    MoviesParams,    Category}